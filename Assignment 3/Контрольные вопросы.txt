1.О каких принципах следует помнить при разработке функций?

	При разработки функции требуется помнить о том, что:
	1)Функции созданы для избегания повторений и сокращения кода. Потому большие функции лучше разделять на меньшие.
	2)Требуется объявить и определить функцию.
	3)О принципах работы перегрузки (см.ниже)

2. В чем заключается концепция встраивания вызовов функций?

	Встраивание функции - по сути указание компилятору, что данную функцию при построении бинарного кода
	стоит в местах вызова просто "раскрыть" в виде её тела. Плюсом такого подхода является большая производительность - процессору
	не требуется бегать от одного места памяти к другому, не требуется разворачивать функции и так далее - он просто выполняет операции.
	Минусом является увеличение времени компиляции и раздувание бинарного файла.

3.Какие аргументы функции могут иметь значения по умолчанию?

	Значения по умолчанию могут иметь любые аргументы, допустимы любые значения, кроме:
	1)Локальных переменных (кроме не определенных)
	2)Указателя this
	3)Не статических полей классов
	4)Других аргументов функции (void Foo(int a, int b = a) - ошибка), кроме неопределенных.

4.На основании чего разрешается выбор перегруженной функции?

	Выбор перегруженной функции разрешается на основе типов кол-ва и порядка
	аргументов, присутствующих в вызове функции. Однако возвращаемое значение и параметры
	по умолчанию в эти критерии не входят.
	
5. Как обеспечить <<состояние>> в функциях и лямбда-выражениях?

	Если я правильно понял вопрос (а мог и неправильно), то здесь речь идёт о том, как сохранить
	некоторые параметры функций между вызовами. Если речь об этом, то варианта два:
	1) Мучаться с глобальными переменными и указателями на них.
	2) Намного более безопасным видится просто применение конструкций вида:
	static var_type var
	Где ключевое слово statiс отвечает за статичность переменных, что внутри функции означает сохранение
	переменной между вызовами.