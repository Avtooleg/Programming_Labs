На чем основано объектно-ориентированное программирование?
	
	ООП основано на следующих концепциях:
	1. Инкапсуляция - разделение полей классов на те, что могут быть использованы только самом классе (private),
	и те, что могут быть доступны извне (public)
	2.Полиморфизм - различные реализации кода при общем интерфейсе - т.е. при одних и тех же названиях и правилами использования.
	3.Наследование - перенос свойств и методов от родителя к ребенку.
	
Какие аспекты следует учитывать при проектировании классов?
	1.В классах должны быть реализованы инварианты - логические условия, которые должны быть верны на протяжении всей работы класса.
	Так, метод чтения, например, не должен беспокоиться о валидности данных класса - они должны оставаться верными после выполнения любой подпрограммы!
	2. Стоит учитывать необходимость наличия конструктора и деструктора. Первый - обязателен для создания экземпляров класса,
	второй - необходим для очистки памяти после окончания срока службы конкретного экземпляра.
	3. Любая выделенная память должна быть очищена по завершению процессов, на которые она была потребна.
	
Почему удобно разделять классы на интерфейс и реализацию?

	Удобство состоит в особенности работы наследования: так, создав несколько дочерних классов-реализаций от одного класса-интерфейса,
	можно затем использовать в сторонних функциях или методах поля класса-интерфейса. В таком случае, будет подтягиваться необходимая реализация
	конкретной "дочки", используемой в данном вызове функции/метода.

Чем внутреннее связывание отличается от внешнего связывания?

	Внутреннее связывание объявляется словом static и имеет смысл в том плане, что позволяет
	разделить одинаковые переменные/функции/объекты (далее - символы) в разных единицах трансляции (файлах типа .сpp и .hpp), ограничив
	их взаимную видимость. Так, символы с внешнем связыванием видны во всех единицах трансляции и определяются лишь единожды.
	Символы с внутренним - видны только в пределах своей единицы трансляции, а при компиляции будет везде вставляться копия, а не ссылка на оригинал.
	
Какими особенностями обладают именованные пространства имен?
	Именованные пространства имен обладают следующими особенностями:
	1. Несколько отдельних блоков пространства имен, объявленных в разных местах с одним именем, считаются единым пространством имен.
	2.Именнованные пространства имен допускают определение своих элементов позднее, если объявление справляется с задачами.
	3. Как и любые пространства имен, именованные пространства имен изолируют свои элементы от глобального доступа, а также помогают решать конфликты имен (как раз за счет глобальной "невидимости").
	Пространства имен могут быть вложенными.